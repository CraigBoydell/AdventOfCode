$StringSource = 'dabAcCaCBAcCcaDA'
$String = 'dabAcCaCBAcCcaDAaaaaaaa'
$StringSource = get-content Input.txt

$Alphabet = @()
for ([byte]$c = [char]'A'; $c -le [char]'Z'; $c++){ $alphabet += ([char]$c).ToString() }
  
$Alphabet | foreach {

  do {start-sleep -seconds 5} until ( (get-job -state Running).Count -lt (Get-WmiObject –class Win32_processor).ThreadCount )
  start-job -Name $_ -Argumentlist $StringSource,$_ -scriptblock {
    $ReactionComplete = $FALSE
    $String = $ARGS[0]
    #$String
    $ElementToRemove = $ARGS[1]
    $String = $String.Replace($ElementToRemove,'').Replace($ElementToRemove.ToLower(),'')
    #$String
    do {
      #write-progress -Activity $String.Length
      $PoppedString = $($i = 0; $StringArr = $String.ToCharArray(); $(do { if ( $StringArr[$i] -eq $StringArr[$i+1] -and $($StringArr[$i] + $stringArr[$i+1]) -cmatch '([A-Z][a-z])|([a-z][A-Z])') { $i++  } else { $StringArr[$i]  };$i++  } until ($i -eq $StringArr.Count)) -join '')
      If ( $PoppedString.Length -ne $String.length  ) { $String = $PoppedString } else { $ReactionComplete = $TRUE }
    } until ( $ReactionComplete )
    $ReactionResult = new-object PSObject | add-Member -MemberType NoteProperty -Value $ElementToRemove -Name ElementToRemove -PassThru | add-member -MemberType NoteProperty -Value $String.Length -Name PostReaction -PassThru
    $ReactionResult
  }
}

Get-Job | Receive-Job -Keep | select-object -Property ElementToRemove,PostReaction | Sort-Object -Property Postreaction | Select-Object -First 1


